@page "/"
@page "/MiniatureGolf"
@page "/MiniatureGolf/{GameId}"
@page "/MiniatureGolf/{GameId}/{Mode}"
@page "/MiniatureGolf/{GameId}/{Mode}/{TeamNumber}"

@using MiniatureGolf.Models
@using MiniatureGolf.DAL.Models
@using Telerik.Blazor;

@inherits MiniatureGolf.Pages.GameScoreboardModel

<h1>Scoreboard</h1>

<div class="c-settingsBox">
    <div class="c-flexHorizontalContainer">
        <span class="c-flexHorizontalContainer">
            @if (this.CurrentUserMode == UserMode.Editor || this.CurrentUserMode == UserMode.Spectator)
            {
                <TelerikButton OnClick="@(this.ToggleUserMode)">
                    @if (this.CurrentUserMode == UserMode.Editor)
                    {
                        <span><strong>editor</strong> / spectator</span>
                    }
                    else if (this.CurrentUserMode == UserMode.Spectator)
                    {
                        <span>editor / <strong>spectator</strong></span>
                    }
                </TelerikButton>
            }

            @if (this.CurrentUserMode == UserMode.Editor)
            {
                if (this.Gamestate.Status == Gamestatus.Created || this.Gamestate.Status == Gamestatus.Configuring || this.Gamestate.Status == Gamestatus.Finished)
                {
                    <button type="button" class="btn btn-primary" disabled="@(!(this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() > 0 || this.Gamestate.Game.Courses.Count > 0))" @onclick="@(this.CreateNewGame)">new game</button>
                }

                if (this.Gamestate.Status == Gamestatus.Configuring)
                {
                    <button type="button" class="btn btn-success" disabled="@(!(this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() > 0 && this.Gamestate.Game.Courses.Count > 0))" @onclick="@(this.StartGame)">start game</button>
                }

                if (this.Gamestate.Status == Gamestatus.Running)
                {
                    <button type="button" class="btn btn-warning" @onclick="@(this.FinishGame)">finish game</button>
                }
            }

            @if (this.Gamestate.Game.Teams.Count(a => a.TeamPlayers.Select(a => a.Player).Any()) > 2)
            {
                <TelerikDropDownList Data="@this.Gamestate?.Game?.Teams?.Where(a => a.TeamPlayers?.Select(a => a.Player).Count() > 0).ToList()"
                                     @bind-value="@this.SelectedTeamNumber"
                                     ValueField="@nameof(Team.Number)"
                                     TextField="@nameof(Team.Name)"
                                     TItem="@Team" TValue="@int"
                                     Height="38px" Width="140px" PopupHeight="Auto" />
            }
        </span>

        <span class="c-flexHorizontalContainer c-flexHorizontalChildRight">
            @if (this.CurrentUserMode == UserMode.Editor)
            {
                <TelerikDropDownList Data="@this.ShareModes" 
                                     @bind-value="@this.SelectedShareMode" 
                                     ValueField="@nameof(UserModeDropDownItem.ModeId)" 
                                     TextField="@nameof(UserModeDropDownItem.Name)"
                                     TItem="@UserModeDropDownItem" TValue="@int"
                                     Height="38px" Width="160px" PopupHeight="Auto"
                                     />
            }
            <a class="btn btn-light c-flexHorizontalChildRight" href="@($"/MiniatureGolf/{this.Gamestate.Game.GUID}/{(this.CurrentUserMode switch { UserMode.Editor => (int)this.SelectedShareMode, UserMode.Spectator => (int)UserMode.Spectator, UserMode.SpectatorReadOnly => (int)UserMode.SpectatorReadOnly, _ => (int)UserMode.SpectatorReadOnly })}/{this.SelectedTeamNumber}")" role="button"><span class="oi oi-link-intact">  share</span></a>
        </span>
    </div>

    @if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Configuring)
    {
    <div>
        <span class="c-rowElement">
            <TelerikNumericTextBox @bind-Value=@this.CourseHitLimit Min="7" Max="10"></TelerikNumericTextBox>
        </span>
        <span class="c-rowElement">
            <TelerikButton Class="c-increaseButton" OnClick="@this.RemovePlayer" Enabled="@(this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() > 0)">-</TelerikButton>
            <TelerikTextBox Label="Player" @bind-value="@PlayerNameToAdd" />
            <TelerikButton Class="c-increaseButton" OnClick="@this.AddPlayer">+</TelerikButton>
            <TelerikButton Icon="myspace" OnClick="@this.CreateNewTeam">new team</TelerikButton>
        </span>

        <span class="c-rowElement">
            <TelerikButton Class="c-increaseButton" OnClick="@this.RemoveCourse" Enabled="@(this.Gamestate.Game.Courses.Count > 0)">-</TelerikButton>
            <TelerikNumericTextBox @bind-Value=@this.CourseParNumberToAdd Min="1" Max="@this.CourseHitLimit"></TelerikNumericTextBox>
            <TelerikButton Class="c-increaseButton" OnClick="@this.AddCourse">+</TelerikButton>
        </span>
    </div>
    }

    <div class="c-flexContainerWithCenteredItem" style="margin-top: 10px;">
        @if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Running)
        {
            <TelerikAnimationContainer AnimationType="@AnimationType.PushDown" AnimationDuration="300" ShowDelay="100" Visible="@this.AutoRefreshHelper.IsRunning">
                <span class="c-toastMessage">auto-refresh in </span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.9 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.4em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.7 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.3em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.5 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.2em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.3 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.1em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.1 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.0em;">@this.AutoRefreshEmoji</span>
            </TelerikAnimationContainer>
        }
    </div>
</div>

<div class="fullViewHeightOnMobileDevice" style="position: relative; margin-top: -10px; min-height: 167px; height: calc(100vh - @((this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Configuring) ? "250" : "193")px);">
    <TelerikGrid Data=@this.Gamestate.Game.Courses.OrderBy(a => a.Number) Height="100%">
        <TelerikGridColumns>
            @if (this.ShowColumns)
            {
                <TelerikGridColumn Title="" Editable="false" Width="22px">
                    <Template>

                        @if (context is Course c)
                        {
                            if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Running)
                            {
                                <div @onclick="@(() => { this.SelectedTeam.CurrentCourseNumber = (this.SelectedTeam.CurrentCourseNumber == c.Number ? null : (int?)c.Number); this.Gamestate.RaiseStateChanged(this, new StateChangedContext { Key = Context_CurrentCourse });})" class="c-clickableCell">
                                    @if (c.Number == this.SelectedTeam.CurrentCourseNumber)
                                    {
                                        <span class="oi oi-aperture c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: darkred;"></span>
                                    }
                                    else if (this.GetCurrentCourseStateForView(c) == CourseState.Finished)
                                    {
                                        <span class="oi oi-check c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: green;" />
                                    }
                                    else if (this.GetCurrentCourseStateForView(c) == CourseState.Started)
                                    {
                                        <span class="oi oi-aperture c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: darkseagreen;"></span>
                                    }
                                </div>
                            }
                            else
                            {
                                <div>
                                    @if (this.GetCurrentCourseStateForView(c) == CourseState.Finished)
                                    {
                                        <span class="oi oi-check c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: green;" />
                                    }
                                    else if (this.GetCurrentCourseStateForView(c) == CourseState.Started)
                                    {
                                        <span class="oi oi-aperture c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: darkseagreen;"></span>
                                    }
                                </div>
                            }
                        }
                    </Template>
                </TelerikGridColumn>


                <TelerikGridColumn Title="No." Field="@nameof(Course.Number)" Editable="false" Width="40px">
                    <Template>
                        @if (context is Course c)
                        {
                            <div class="c-alignCenter c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")">@((context as Course).Number)</div>
                        }
                    </Template>
                </TelerikGridColumn>

                <TelerikGridColumn Title="Par" Field="@nameof(Course.Par)" Editable="false" Width="40px">
                    <Template>
                        @if (context is Course c)
                        {
                            if (this.CurrentUserMode == UserMode.Editor && (this.Gamestate.Status == Gamestatus.Configuring || this.Gamestate.Status == Gamestatus.Running))
                            {
                                <div class="c-alignCenter c-clickableCell c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" @onclick="@(() => this.IncreasePar(context as Course))">@((context as Course).Par)</div>
                            }
                            else
                            {
                                <div class="c-alignCenter c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")">@((context as Course).Par)</div>
                            }
                        }
                    </Template>
                </TelerikGridColumn>

                @if (this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() == 0)
                {
                    <TelerikGridColumn Title="" Field="" />
                }

                @foreach (var player in this.RankedPlayers)
                {
                    <TelerikGridColumn Title="@($"{player.Name} ({player.PlayerCourseHits.Sum(a => a.HitCount ?? 0)})")">
                        <Template>
                            @if (context is Course c)
                            {
                                if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Running)
                                {
                                    <div class="c-alignCenter c-clickableCell c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" @onclick="@(() => this.IncreaseHitCount(context as Course, player))">
                                        <div class="c-ratingColorize" data-hitDiffToPar="@((c.PlayerCourseHits.SingleOrDefault(a => a.Player == player)?.HitCount ?? 0) - c.Par)">
                                            <div class="c-alignCenter">@((c.PlayerCourseHits.SingleOrDefault(a => a.Player == player)?.HitCount))</div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="c-alignCenter c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")">
                                        <div class="c-ratingColorize" data-hitDiffToPar="@((c.PlayerCourseHits.SingleOrDefault(a => a.Player == player)?.HitCount ?? 0) - c.Par)">
                                            <div class="c-alignCenter">@((c.PlayerCourseHits.SingleOrDefault(a => a.Player == player)?.HitCount))</div>
                                        </div>
                                    </div>
                                }
                            }
                        </Template>
                    </TelerikGridColumn>
                }
            }
        </TelerikGridColumns>
    </TelerikGrid>
    @if (this.CurrentUserMode == UserMode.Editor)
    {
        <div class="c-disableOverlay" style="visibility: @(this.ShowOuterViewEditOverlay ? "visible" : "collapse");">
            <div class="c-disableOverlayOuterContainer">
                <div class="c-disableOverlayContainer" style="opacity: @(this.OuterViewEditOverlayAnimationTrigger ? "1" : "0");">
                    <div style="font-size: 60px;" class="c-animate-flicker">🔒</div>
                    <div style="font-size: 1.5em; text-align: center;">edits from outer view happening, please wait...</div>
                </div>
            </div>
        </div>
    }
</div>

<TelerikWindow Width="420px" Height="260px" Centered="true" Visible="@IsNotificationWindowVisible" Modal="true" >
    <TelerikWindowTitle>
        <strong>404 : game not found</strong>
    </TelerikWindowTitle>
    <TelerikWindowActions>
        <TelerikWindowAction Name="Close" OnClick="@(() => { this.IsNotificationWindowVisible = false; })"/>
    </TelerikWindowActions>
    <TelerikWindowContent>
        <div style="display: flex; flex-direction: column;">
            <div style="display: flex; justify-content: space-around;">
                <div>
                    <div><strong>Oops!</strong></div>
                    <div>you found a</div>
                    <div><strong style="font-size: 1.4em;">Dead Link</strong></div>
                </div>
                <img src="/assets/images/dead-link.jpg" />
            </div>

            <div style="display: flex; justify-content: flex-end; margin-top: 15px;">
                <TelerikButton OnClick="@(() => { this.IsNotificationWindowVisible = false; })" Primary="true">OK</TelerikButton>
            </div>
        </div>

    </TelerikWindowContent>
</TelerikWindow>

<link href="/css/styles/GameScoreboard.min.css" rel="stylesheet" />