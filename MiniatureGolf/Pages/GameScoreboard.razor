@page "/"
@page "/scoreboard"
@page "/scoreboard/{GameId}"
@page "/scoreboard/{GameId}/{Mode}"
@page "/scoreboard/{GameId}/{Mode}/{TeamNumber}"
@page "/scoreboard/{GameId}/{Mode}/{TeamNumber}/{RankingMode}"

@using MiniatureGolf.Models
@using MiniatureGolf.DAL.Models
@using Telerik.Blazor
@using Telerik.Blazor.Components

@inherits MiniatureGolf.Pages.GameScoreboardModel

<div class="c-settingsBox">
    <div class="c-flexHorizontalContainer">
        <span class="c-flexHorizontalContainer">
            @if (this.CurrentUserMode == UserMode.Editor || this.CurrentUserMode == UserMode.Spectator)
            {
                <span class="btn-group btn-group-toggle" data-toggle="buttons">
                    <label class="btn btn-secondary @(this.CurrentUserMode == UserMode.Editor ? "active" : "")">
                        <input type="radio" name="options" id="option1" autocomplete="off" onclick="@(() => SetCurrentUserMode(UserMode.Editor))" /> editor
                    </label>
                    <label class="btn btn-secondary @(this.CurrentUserMode == UserMode.Spectator ? "active" : "")">
                        <input type="radio" name="options" id="option2" autocomplete="off" onclick="@(() => SetCurrentUserMode(UserMode.Spectator))" /> spectator
                    </label>
                </span>
            }

            @if (this.CurrentUserMode == UserMode.Editor)
            {
                if (this.Gamestate.Status == Gamestatus.Created || this.Gamestate.Status == Gamestatus.Configuring || this.Gamestate.Status == Gamestatus.Finished)
                {
                    <button type="button" class="btn btn-primary" disabled="@(!(this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() > 0 || this.Gamestate.Game.Courses.Count > 0))" onclick="@(() => this.CreateNewGame())">new game</button>
                }

                if (this.Gamestate.Status == Gamestatus.Configuring)
                {
                    <button type="button" class="btn btn-success" disabled="@(!(this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() > 0 && this.Gamestate.Game.Courses.Count > 0))" onclick="@(() => this.StartGame())">start game</button>
                }

                if (this.Gamestate.Status == Gamestatus.Running)
                {
                    <button type="button" class="btn btn-warning" onclick="@(() => this.FinishGame())">finish game</button>
                }
            }

            <TelerikDropDownList Data="@(this.Gamestate?.Game?.Teams?
                .Where(a => a.TeamPlayers?.Select(a => a.Player).Count() > 0)
                .OrderByDescending(a => a.IsDefaultTeam)
                .ThenBy(a => a.AverageHitCount ?? double.MaxValue))"
                                 @bind-Value="@this.SelectedTeamNumber"
                                 ValueField="@nameof(Team.Number)"
                                 TextField="@(this.RankingDisplayMode switch { RankingDisplayMode.Average => nameof(Team.NameForAvgRanking), RankingDisplayMode.Sum => nameof(Team.NameForAvgOfPlayerSumRanking), _ => throw new NotImplementedException()})"
                                 TItem="@Team" TValue="@int"
                                 Width="300px">
                <DropDownListSettings>
                    <DropDownListPopupSettings Height="auto" />
                </DropDownListSettings>
            </TelerikDropDownList>

            <span class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-info @(this.RankingDisplayMode == RankingDisplayMode.Average ? "active" : "")">
                    <input type="radio" name="options" id="option1" autocomplete="off" onclick="@(() => SetRankingDisplayMode(RankingDisplayMode.Average))" /> Average
                </label>
                <label class="btn btn-info @(this.RankingDisplayMode == RankingDisplayMode.Sum ? "active" : "")">
                    <input type="radio" name="options" id="option2" autocomplete="off" onclick="@(() => SetRankingDisplayMode(RankingDisplayMode.Sum))" /> Sum
                </label>
            </span>
        </span>

        <span class="c-flexHorizontalContainer c-flexHorizontalChildRight">
            @if (this.CurrentUserMode == UserMode.Editor)
            {
                <TelerikDropDownList Data="@this.ShareModes"
                                 @bind-Value="@this.SelectedShareMode"
                                 ValueField="@nameof(UserModeDropDownItem.ModeId)"
                                 TextField="@nameof(UserModeDropDownItem.Name)"
                                 TItem="@UserModeDropDownItem" TValue="@int"
                                 Width="160px">
                    <DropDownListSettings>
                        <DropDownListPopupSettings Height="auto" />
                    </DropDownListSettings>
                </TelerikDropDownList>
            }
            <a class="btn btn-light c-flexHorizontalChildRight" href="@($"/scoreboard/{this.Gamestate.Game.GUID}/{(this.CurrentUserMode switch { UserMode.Editor => (int)this.SelectedShareMode, UserMode.Spectator => (int)UserMode.Spectator, UserMode.SpectatorReadOnly => (int)UserMode.SpectatorReadOnly, _ => (int)UserMode.SpectatorReadOnly })}/{this.SelectedTeamNumber}/{(int)this.RankingDisplayMode}")" role="button"><span class="oi oi-link-intact">  share</span></a>
        </span>
    </div>

    @if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Configuring)
    {
        <div>
            <span class="c-rowElement">
                <label>hit-limit:</label>
                <TelerikNumericTextBox @bind-Value="@this.CourseHitLimit" Min="7" Max="10" Width="80px"></TelerikNumericTextBox>
            </span>
            <span class="c-rowElement">
                <TelerikButton Class="c-increaseButton" OnClick="@this.RemovePlayer" Enabled="@(this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() > 0)">-</TelerikButton>
                <TelerikTextBox @bind-Value="@PlayerNameToAdd" PlaceHolder="player name" Width="200px" />
                <TelerikButton Class="c-increaseButton" OnClick="@this.AddPlayer">+</TelerikButton>
                <TelerikButton Icon="myspace" OnClick="@this.CreateNewTeam">new team</TelerikButton>
            </span>

            <span class="c-rowElement">
                <label>courses:</label>
                <TelerikButton Class="c-increaseButton" OnClick="@this.RemoveCourse" Enabled="@(this.Gamestate.Game.Courses.Count > 0)">-</TelerikButton>
                <TelerikNumericTextBox @bind-Value="@this.CourseParNumberToAdd" Min="1" Max="@this.CourseHitLimit" Width="200px"></TelerikNumericTextBox>
                <TelerikButton Class="c-increaseButton" OnClick="@this.AddCourse">+</TelerikButton>
            </span>
        </div>
    }

    <div class="c-flexContainerWithCenteredItem" style="margin-top: 10px;">
        @if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Running)
        {
            <TelerikAnimationContainer AnimationType="@AnimationType.SlideUp" AnimationDuration="300" ShowDelay="100" @ref="@this.AutoRefreshAnimationContainer">
                <span class="c-toastMessage">auto-refresh in </span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.9 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.4em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.7 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.3em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.5 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.2em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.3 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.1em;">@this.AutoRefreshEmoji</span>
                <span class="c-opacityAnimation @(this.AutoRefreshHelper.Progress >= 0.1 ? "c-opacityAnimationHidden" : "")" style="font-size: 1.0em;">@this.AutoRefreshEmoji</span>
            </TelerikAnimationContainer>
        }
    </div>
</div>

<div class="fullViewHeightOnMobileDevice" style="position: relative; margin-top: -10px; min-height: 167px; height: calc(100vh - @((this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Configuring) ? "200" : "143")px);">
    <TelerikGrid Data=@this.Gamestate.Game.Courses.OrderBy(a => a.Number) Height="100%">
        <GridColumns>
            @if (this.ShowColumns)
            {
                <GridColumn Title="" Editable="false" Width="22px">
                    <Template>
                        @if (context is Course c)
                        {
                            if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Running)
                            {
                                <div onclick="@(() => { this.SelectedTeam.CurrentCourseNumber = (this.SelectedTeam.CurrentCourseNumber == c.Number ? null : (int?)c.Number); this.Gamestate.RaiseStateChanged(this, new StateChangedContext { Key = Context_CurrentCourse });})" class="c-clickableCell">
                                    @if (c.Number == this.SelectedTeam.CurrentCourseNumber)
                                    {
                                        <span class="oi oi-aperture c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: darkred;"></span>
                                    }
                                    else if (this.GetCurrentCourseStateForView(c) == CourseState.Finished)
                                    {
                                        <span class="oi oi-check c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: green;" />
                                    }
                                    else if (this.GetCurrentCourseStateForView(c) == CourseState.Started)
                                    {
                                        <span class="oi oi-aperture c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: darkseagreen;"></span>
                                    }
                                </div>
                            }
                            else
                            {
                                <div>
                                    @if (this.GetCurrentCourseStateForView(c) == CourseState.Finished)
                                    {
                                        <span class="oi oi-check c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: green;" />
                                    }
                                    else if (this.GetCurrentCourseStateForView(c) == CourseState.Started)
                                    {
                                        <span class="oi oi-aperture c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" style="color: darkseagreen;"></span>
                                    }
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>


                <GridColumn Title="No." Field="@nameof(Course.Number)" Editable="false" Width="40px">
                    <Template>
                        @if (context is Course c)
                        {
                            <div class="c-alignCenter c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")">@((context as Course).Number)</div>
                        }
                    </Template>
                </GridColumn>

                <GridColumn Title="Par" Field="@nameof(Course.Par)" Editable="false" Width="40px">
                    <Template>
                        @if (context is Course c)
                        {
                            if (this.CurrentUserMode == UserMode.Editor && (this.Gamestate.Status == Gamestatus.Configuring || this.Gamestate.Status == Gamestatus.Running))
                            {
                                <div class="c-alignCenter c-clickableCell c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" onclick="@(() => this.IncreasePar(context as Course))">@((context as Course).Par)</div>
                            }
                            else
                            {
                                <div class="c-alignCenter c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")">@((context as Course).Par)</div>
                            }
                        }
                    </Template>
                </GridColumn>

                @if (this.Gamestate.Game.Teams.Single(a => a.IsDefaultTeam).TeamPlayers.Select(a => a.Player).Count() == 0)
                {
                    <GridColumn Title="" Field="" />
                }

                @foreach (var player in this.RankedPlayers)
                {
                    <GridColumn Title="@(this.RankingDisplayMode switch { RankingDisplayMode.Average => player.NameForAvgRanking, RankingDisplayMode.Sum => player.NameForSumRanking, _ => throw new NotImplementedException()})">
                        <Template>
                            @if (context is Course c)
                            {
                                if (this.CurrentUserMode == UserMode.Editor && this.Gamestate.Status == Gamestatus.Running)
                                {
                                    <div class="c-alignCenter c-clickableCell c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")" onclick="@(() => this.IncreaseHitCount(context as Course, player))">
                                        <div class="c-ratingColorize" data-hitDiffToPar="@((player.PlayerCourseHits.SingleOrDefault(a => a.Course == c)?.HitCount ?? 0) - c.Par)">
                                            <div class="c-alignCenter">@((player.PlayerCourseHits.SingleOrDefault(a => a.Course == c)?.HitCount))</div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="c-alignCenter c-loweredOpacityAnimation @(this.RowShouldBeDisplayedTransparently(c) ? "c-loweredOpacity" : "")">
                                        <div class="c-ratingColorize" data-hitDiffToPar="@((player.PlayerCourseHits.SingleOrDefault(a => a.Course == c)?.HitCount ?? 0) - c.Par)">
                                            <div class="c-alignCenter">@((player.PlayerCourseHits.SingleOrDefault(a => a.Course == c)?.HitCount))</div>
                                        </div>
                                    </div>
                                }
                            }
                        </Template>
                    </GridColumn>
                }
            }
        </GridColumns>
    </TelerikGrid>
    @if (this.CurrentUserMode == UserMode.Editor)
    {
        <div class="c-disableOverlay" style="visibility: @(this.ShowOuterViewEditOverlay ? "visible" : "collapse");">
            <div class="c-disableOverlayOuterContainer">
                <div class="c-disableOverlayContainer" style="opacity: @(this.OuterViewEditOverlayAnimationTrigger ? "1" : "0");">
                    <div style="font-size: 60px;" class="c-animate-flicker">🔒</div>
                    <div style="font-size: 1.5em; text-align: center;">edits from outer view happening, please wait...</div>
                </div>
            </div>
        </div>
    }
</div>

<TelerikWindow Width="420px" Height="260px" Centered="true" Visible="@IsNotificationWindowVisible" Modal="true">
    <WindowTitle>
        <strong>404 : game not found</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@(() => { this.IsNotificationWindowVisible = false; })" />
    </WindowActions>
    <WindowContent>
        <div style="display: flex; flex-direction: column;">
            <div style="display: flex; justify-content: space-around;">
                <div>
                    <div><strong>Oops!</strong></div>
                    <div>you found a</div>
                    <div><strong style="font-size: 1.4em;">Dead Link</strong></div>
                </div>
                <img src="/assets/images/dead-link.jpg" />
            </div>

            <div style="display: flex; justify-content: flex-end; margin-top: 15px;">
                <TelerikButton OnClick="@(() => { this.IsNotificationWindowVisible = false; })" Primary="true">OK</TelerikButton>
            </div>
        </div>

    </WindowContent>
</TelerikWindow>

<link href="/css/styles/GameScoreboard.min.css" rel="stylesheet" />